# -*- coding: utf-8 -*-
"""homework_modules.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hsz7RXp7JcJit4WlG9r2N31ZVYG2Q1mO
"""

import numpy as np
import math
import torch
import torch.nn as nn
import torch.nn.functional as F

"""**Module** is an abstract class which defines fundamental methods necessary for a training a neural network. You do not need to change anything here, just read the comments."""

class Module(object):
    """
    Basically, you can think of a module as of a something (black box)
    which can process `input` data and produce `ouput` data.
    This is like applying a function which is called `forward`:

        output = module.forward(input)

    The module should be able to perform a backward pass: to differentiate the `forward` function.
    More, it should be able to differentiate it if is a part of chain (chain rule).
    The latter implies there is a gradient from previous step of a chain rule.

        gradInput = module.backward(input, gradOutput)
    """
    def __init__ (self):
        self.output = None
        self.gradInput = None
        self.training = True

    def forward(self, input):
        """
        Takes an input object, and computes the corresponding output of the module.
        """
        return self.updateOutput(input)

    def backward(self,input, gradOutput):
        """
        Performs a backpropagation step through the module, with respect to the given input.

        This includes
         - computing a gradient w.r.t. `input` (is needed for further backprop),
         - computing a gradient w.r.t. parameters (to update parameters while optimizing).
        """
        self.updateGradInput(input, gradOutput)
        self.accGradParameters(input, gradOutput)
        return self.gradInput


    def updateOutput(self, input):
        """
        Computes the output using the current parameter set of the class and input.
        This function returns the result which is stored in the `output` field.

        Make sure to both store the data in `output` field and return it.
        """

        # The easiest case:

        # self.output = input
        # return self.output

        pass

    def updateGradInput(self, input, gradOutput):
        """
        Computing the gradient of the module with respect to its own input.
        This is returned in `gradInput`. Also, the `gradInput` state variable is updated accordingly.

        The shape of `gradInput` is always the same as the shape of `input`.

        Make sure to both store the gradients in `gradInput` field and return it.
        """

        # The easiest case:

        # self.gradInput = gradOutput
        # return self.gradInput

        pass

    def accGradParameters(self, input, gradOutput):
        """
        Computing the gradient of the module with respect to its own parameters.
        No need to override if module has no parameters (e.g. ReLU).
        """
        pass

    def zeroGradParameters(self):
        """
        Zeroes `gradParams` variable if the module has params.
        """
        pass

    def getParameters(self):
        """
        Returns a list with its parameters.
        If the module does not have parameters return empty list.
        """
        return []

    def getGradParameters(self):
        """
        Returns a list with gradients with respect to its parameters.
        If the module does not have parameters return empty list.
        """
        return []

    def train(self):
        """
        Sets training mode for the module.
        Training and testing behaviour differs for Dropout, BatchNorm.
        """
        self.training = True

    def evaluate(self):
        """
        Sets evaluation mode for the module.
        Training and testing behaviour differs for Dropout, BatchNorm.
        """
        self.training = False

    def __repr__(self):
        """
        Pretty printing. Should be overrided in every module if you want
        to have readable description.
        """
        return "Module"

"""# Sequential container

**Define** a forward and backward pass procedures.
"""

class Sequential(Module):
    def __init__(self):
        super(Sequential, self).__init__()
        self.modules = []
        self.intermediate_outputs = []

    def add(self, module):
        self.modules.append(module)

    def updateOutput(self, input):
        self.intermediate_outputs = [input]
        output = input
        for module in self.modules:
            output = module.updateOutput(output)
            self.intermediate_outputs.append(output)
        self.output = output
        return self.output

    def backward(self, input, gradOutput):
        grad = gradOutput
        for i in range(len(self.modules) - 1, -1, -1):
            grad = self.modules[i].backward(self.intermediate_outputs[i], grad)
        self.gradInput = grad
        return self.gradInput

    def zeroGradParameters(self):
        for module in self.modules:
            module.zeroGradParameters()

    def getParameters(self):
        return [x.getParameters() for x in self.modules]

    def getGradParameters(self):
        return [x.getGradParameters() for x in self.modules]

    def __repr__(self):
        return "Sequential(\n" + "\n".join([str(x) for x in self.modules]) + "\n)"

    def __getitem__(self, x):
        return self.modules.__getitem__(x)

    def train(self):
        self.training = True
        for module in self.modules:
            module.train()

    def evaluate(self):
        self.training = False
        for module in self.modules:
            module.evaluate()

"""# Layers

## 1 (0.2). Linear transform layer
Also known as dense layer, fully-connected layer, FC-layer, InnerProductLayer (in caffe), affine transform
- input:   **`batch_size x n_feats1`**
- output: **`batch_size x n_feats2`**
"""

class Linear(Module):
    """
    A module which applies a linear transformation
    A common name is fully-connected layer, InnerProductLayer in caffe.

    The module should work with 2D input of shape (n_samples, n_feature).
    """
    def __init__(self, n_in, n_out):
        super(Linear, self).__init__()

        # This is a nice initialization
        stdv = 1./np.sqrt(n_in)
        self.W = np.random.uniform(-stdv, stdv, size = (n_out, n_in))
        self.b = np.random.uniform(-stdv, stdv, size = n_out)

        self.gradW = np.zeros_like(self.W)
        self.gradb = np.zeros_like(self.b)

    def updateOutput(self, input):
        # Your code goes here. ################################################
        self.output = input.dot(self.W.T) + self.b
        return self.output

    def updateGradInput(self, input, gradOutput):
        # Your code goes here. ################################################
        self.gradInput = gradOutput.dot(self.W)
        return self.gradInput

    def accGradParameters(self, input, gradOutput):
        # Your code goes here. ################################################
        self.gradW = gradOutput.T.dot(input)
        self.gradb = np.sum(gradOutput, axis=0)
        pass

    def zeroGradParameters(self):
        self.gradW.fill(0)
        self.gradb.fill(0)

    def getParameters(self):
        return [self.W, self.b]

    def getGradParameters(self):
        return [self.gradW, self.gradb]

    def __repr__(self):
        s = self.W.shape
        q = 'Linear %d -> %d' %(s[1],s[0])
        return q

"""## 2. (0.2) SoftMax
- input:   **`batch_size x n_feats`**
- output: **`batch_size x n_feats`**

$\text{softmax}(x)_i = \frac{\exp x_i} {\sum_j \exp x_j}$

Recall that $\text{softmax}(x) == \text{softmax}(x - \text{const})$. It makes possible to avoid computing exp() from large argument.
"""

class SoftMax(Module):
    def __init__(self):
         super(SoftMax, self).__init__()

    def updateOutput(self, input):
        # start with normalization for numerical stability
        self.output = np.subtract(input, input.max(axis=1, keepdims=True))

        # Your code goes here. ################################################
        exp_input = np.exp(self.output)
        self.output = exp_input / np.sum(exp_input, axis=1, keepdims=True)

        return self.output

    def updateGradInput(self, input, gradOutput):
        # Your code goes here. ################################################
        batch_size, n_feats = input.shape
        self.gradInput = np.zeros_like(input)

        for i in range(batch_size):
            y = self.output[i].reshape(-1, 1)
            grad = np.diagflat(y) - np.dot(y, y.T)
            self.gradInput[i] = np.dot(grad, gradOutput[i])

        return self.gradInput

    def __repr__(self):
        return "SoftMax"

"""## 3. (0.2) LogSoftMax
- input:   **`batch_size x n_feats`**
- output: **`batch_size x n_feats`**

$\text{logsoftmax}(x)_i = \log\text{softmax}(x)_i = x_i - \log {\sum_j \exp x_j}$

The main goal of this layer is to be used in computation of log-likelihood loss.
"""

class LogSoftMax(Module):
    def __init__(self):
         super(LogSoftMax, self).__init__()

    def updateOutput(self, input):
        self.output = np.subtract(input, input.max(axis=1, keepdims=True))

        # Your code goes here. ################################################
        exp_input = np.exp(self.output)
        sum_exp = np.sum(exp_input, axis=1, keepdims=True)
        self.output = np.log(exp_input / sum_exp)

        return self.output

    def updateGradInput(self, input, gradOutput):
        # Your code goes here. ################################################—ç
        batch_size, n_feats = input.shape
        exp_input = np.exp(self.output)
        sum_exp = np.sum(exp_input, axis=1, keepdims=True)
        softmax_output = exp_input / sum_exp
        self.gradInput = gradOutput - softmax_output * np.sum(gradOutput, axis=1, keepdims=True)

        return self.gradInput

    def __repr__(self):
        return "LogSoftMax"

"""## 4. (0.3) Batch normalization
One of the most significant recent ideas that impacted NNs a lot is [**Batch normalization**](http://arxiv.org/abs/1502.03167). The idea is simple, yet effective: the features should be whitened ($mean = 0$, $std = 1$) all the way through NN. This improves the convergence for deep models letting it train them for days but not weeks. **You are** to implement the first part of the layer: features normalization. The second part (`ChannelwiseScaling` layer) is implemented below.

- input:   **`batch_size x n_feats`**
- output: **`batch_size x n_feats`**

The layer should work as follows. While training (`self.training == True`) it transforms input as $$y = \frac{x - \mu}  {\sqrt{\sigma + \epsilon}}$$
where $\mu$ and $\sigma$ - mean and variance of feature values in **batch** and $\epsilon$ is just a small number for numericall stability. Also during training, layer should maintain exponential moving average values for mean and variance:
```
    self.moving_mean = self.moving_mean * alpha + batch_mean * (1 - alpha)
    self.moving_variance = self.moving_variance * alpha + batch_variance * (1 - alpha)
```
During testing (`self.training == False`) the layer normalizes input using moving_mean and moving_variance.

Note that decomposition of batch normalization on normalization itself and channelwise scaling here is just a common **implementation** choice. In general "batch normalization" always assumes normalization + scaling.
"""

class BatchNormalization(Module):
    EPS = 1e-3

    def __init__(self, alpha=0.9):
        super(BatchNormalization, self).__init__()
        self.alpha = alpha
        self.moving_mean = None
        self.moving_variance = None

    def updateOutput(self, input):
        batch_mean = np.mean(input, axis=0)
        batch_var = np.var(input, axis=0)

        if self.training:
            self.output = (input - batch_mean) / np.sqrt(batch_var + self.EPS)

            if self.moving_mean is None:
                self.moving_mean = batch_mean
                self.moving_variance = batch_var
            else:
                self.moving_mean = self.alpha * self.moving_mean + (1 - self.alpha) * batch_mean
                self.moving_variance = self.alpha * self.moving_variance + (1 - self.alpha) * batch_var
        else:
            self.output = (input - self.moving_mean) / np.sqrt(self.moving_variance + self.EPS)

        return self.output

    def updateGradInput(self, input, gradOutput):
        batch_size = input.shape[0]
        batch_mean = np.mean(input, axis=0)
        batch_var = np.var(input, axis=0)
        batch_std = np.sqrt(batch_var + self.EPS)

        normalized_input = (input - batch_mean) / batch_std

        d_norm = gradOutput / batch_std
        d_var = np.sum(gradOutput * (input - batch_mean) * (-0.5) * (batch_var + self.EPS) ** (-1.5), axis=0)
        d_mean = np.sum(gradOutput * (-1 / batch_std), axis=0) + d_var * np.sum(-2 * (input - batch_mean), axis=0) / batch_size

        self.gradInput = d_norm + (2.0 / batch_size) * d_var * (input - batch_mean) + d_mean / batch_size

        return self.gradInput

    def __repr__(self):
        return "BatchNormalization"

class ChannelwiseScaling(Module):
    """
       Implements linear transform of input y = \gamma * x + \beta
       where \gamma, \beta - learnable vectors of length x.shape[-1]
    """
    def __init__(self, n_out):
        super(ChannelwiseScaling, self).__init__()

        stdv = 1./np.sqrt(n_out)
        self.gamma = np.random.uniform(-stdv, stdv, size=n_out)
        self.beta = np.random.uniform(-stdv, stdv, size=n_out)

        self.gradGamma = np.zeros_like(self.gamma)
        self.gradBeta = np.zeros_like(self.beta)

    def updateOutput(self, input):
        self.output = input * self.gamma + self.beta
        return self.output

    def updateGradInput(self, input, gradOutput):
        self.gradInput = gradOutput * self.gamma
        return self.gradInput

    def accGradParameters(self, input, gradOutput):
        self.gradBeta = np.sum(gradOutput, axis=0)
        self.gradGamma = np.sum(gradOutput*input, axis=0)

    def zeroGradParameters(self):
        self.gradGamma.fill(0)
        self.gradBeta.fill(0)

    def getParameters(self):
        return [self.gamma, self.beta]

    def getGradParameters(self):
        return [self.gradGamma, self.gradBeta]

    def __repr__(self):
        return "ChannelwiseScaling"

"""Practical notes. If BatchNormalization is placed after a linear transformation layer (including dense layer, convolutions, channelwise scaling) that implements function like `y = weight * x + bias`, than bias adding become useless and could be omitted since its effect will be discarded while batch mean subtraction. If BatchNormalization (followed by `ChannelwiseScaling`) is placed before a layer that propagates scale (including ReLU, LeakyReLU) followed by any linear transformation layer than parameter `gamma` in `ChannelwiseScaling` could be freezed since it could be absorbed into the linear transformation layer.

## 5. (0.3) Dropout
Implement [**dropout**](https://www.cs.toronto.edu/~hinton/absps/JMLRdropout.pdf). The idea and implementation is really simple: just multimply the input by $Bernoulli(p)$ mask. Here $p$ is probability of an element to be zeroed.

This has proven to be an effective technique for regularization and preventing the co-adaptation of neurons.

While training (`self.training == True`) it should sample a mask on each iteration (for every batch), zero out elements and multiply elements by $1 / (1 - p)$. The latter is needed for keeping mean values of features close to mean values which will be in test mode. When testing this module should implement identity transform i.e. `self.output = input`.

- input:   **`batch_size x n_feats`**
- output: **`batch_size x n_feats`**
"""

class Dropout(Module):
    def __init__(self, p=0.5):
        super(Dropout, self).__init__()

        self.p = p
        self.mask = None

    def updateOutput(self, input):
        # Your code goes here. ################################################
        if self.training:
            self.mask = (np.random.rand(*input.shape) > self.p).astype(float)
            self.output = input * self.mask / (1 - self.p)  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
        else:
            self.output = input
        return self.output

    def updateGradInput(self, input, gradOutput):
        # Your code goes here. ################################################
        if self.training:
            self.gradInput = gradOutput * self.mask / (1 - self.p)  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—É –∂–µ –º–∞—Å–∫—É
        else:
            self.gradInput = gradOutput
        return self.gradInput

    def __repr__(self):
        return "Dropout"

"""#6. (2.0) Conv2d
Implement [**Conv2d**](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html). Use only this list of parameters: (in_channels, out_channels, kernel_size, stride, padding, bias, padding_mode) and fix dilation=1 and groups=1.
"""

class Conv2d(Module):
    def __init__(self, in_channels, out_channels, kernel_size,
                 stride=1, padding=0, bias=True, padding_mode='zeros'):
        super(Conv2d, self).__init__()

        self.in_channels = in_channels
        self.out_channels = out_channels
        self.kernel_size = kernel_size
        self.stride = stride
        self.padding = padding
        self.bias = bias
        self.padding_mode = padding_mode

    def updateOutput(self, input):
        # Your code goes here. ################################################
        batch_size, in_channels, in_height, in_width = input.shape
        if self.padding_mode == 'zeros':
            input_padded = np.pad(input, ((0,), (0,), (self.padding,), (self.padding,)), mode='constant')

        out_height = (in_height + 2 * self.padding - self.kernel_size) // self.stride + 1
        out_width = (in_width + 2 * self.padding - self.kernel_size) // self.stride + 1

        output = np.zeros((batch_size, self.out_channels, out_height, out_width))

        for b in range(batch_size):
            for o in range(self.out_channels):
                for i in range(out_height):
                    for j in range(out_width):
                        h_start = i * self.stride
                        h_end = h_start + self.kernel_size
                        w_start = j * self.stride
                        w_end = w_start + self.kernel_size

                        output[b, o, i, j] = np.sum(
                            input_padded[b, :, h_start:h_end, w_start:w_end] * self.weights[o]
                        )

                        if self.bias:
                            output[b, o, i, j] += self.biases[o]

        self.output = output
        return self.output

    def updateGradInput(self, input, gradOutput):
        # Your code goes here. ################################################
        return self.gradInput

    def __repr__(self):
        return "Conv2d"

"""#7. (0.5) Implement [**MaxPool2d**](https://pytorch.org/docs/stable/generated/torch.nn.MaxPool2d.html) and [**AvgPool2d**](https://pytorch.org/docs/stable/generated/torch.nn.AvgPool2d.html). Use only parameters like kernel_size, stride, padding (negative infinity for maxpool and zero for avgpool) and other parameters fixed as in framework."""

class MaxPool2d(Module):
    def __init__(self, kernel_size, stride, padding):
        super(MaxPool2d, self).__init__()
        self.kernel_size = kernel_size
        self.stride = stride
        self.padding = padding

    def updateOutput(self, input):
        input = torch.as_tensor(input)

        if self.padding > 0:
            input = F.pad(input, (self.padding, self.padding, self.padding, self.padding), mode='constant', value=-np.inf)

        self.output = F.max_pool2d(input, kernel_size=self.kernel_size, stride=self.stride, padding=0).numpy()
        return self.output

    def updateGradInput(self, input, gradOutput):
        gradOutput = torch.as_tensor(gradOutput)
        input = torch.as_tensor(input)

        padded_shape = (
            input.shape[0],
            input.shape[1],
            input.shape[2] + 2 * self.padding,
            input.shape[3] + 2 * self.padding
        )
        gradInput_padded = torch.zeros(padded_shape, dtype=gradOutput.dtype)

        kh, kw = self.kernel_size, self.kernel_size
        sh, sw = self.stride, self.stride

        for b in range(gradOutput.shape[0]):
            for c in range(gradOutput.shape[1]):
                for i in range(gradOutput.shape[2]):
                    for j in range(gradOutput.shape[3]):
                        h_start = i * sh
                        w_start = j * sw

                        input_slice = input[b, c, h_start:h_start + kh, w_start:w_start + kw]
                        max_pos = torch.unravel_index(torch.argmax(input_slice), input_slice.shape)

                        gradInput_padded[b, c, h_start + max_pos[0], w_start + max_pos[1]] += gradOutput[b, c, i, j]

        if self.padding > 0:
            gradInput = gradInput_padded[:, :, self.padding:-self.padding, self.padding:-self.padding]
        else:
            gradInput = gradInput_padded

        self.gradInput = gradInput.numpy()
        return self.gradInput

    def __repr__(self):
        return "MaxPool2d"

class AvgPool2d(Module):
    def __init__(self, kernel_size, stride, padding):
        super(AvgPool2d, self).__init__()
        self.kernel_size = kernel_size
        self.stride = stride
        self.padding = padding

    def updateOutput(self, input):
        input = torch.as_tensor(input)
        if self.padding > 0:
            input = F.pad(input, (self.padding, self.padding, self.padding, self.padding), mode='constant', value=0)
        self.output = F.avg_pool2d(input, kernel_size=self.kernel_size, stride=self.stride, padding=0).numpy()
        return self.output

    def updateGradInput(self, input, gradOutput):
        gradOutput = torch.as_tensor(gradOutput)
        input = torch.as_tensor(input)

        padded_shape = (
            input.shape[0],
            input.shape[1],
            input.shape[2] + 2 * self.padding,
            input.shape[3] + 2 * self.padding
        )
        gradInput_padded = torch.zeros(padded_shape, dtype=gradOutput.dtype)

        kh, kw = self.kernel_size, self.kernel_size
        sh, sw = self.stride, self.stride

        for i in range(gradOutput.shape[2]):
            for j in range(gradOutput.shape[3]):
                h_start = i * sh
                w_start = j * sw
                gradInput_padded[:, :, h_start:h_start+kh, w_start:w_start+kw] += (gradOutput[:, :, i:i+1, j:j+1] / (kh * kw))

        if self.padding > 0:
            gradInput = gradInput_padded[:, :, self.padding:-self.padding, self.padding:-self.padding]
        else:
            gradInput = gradInput_padded

        self.gradInput = gradInput.numpy()
        return self.gradInput

    def __repr__(self):
        return "AvgPool2d"

"""#8. (0.3) Implement **GlobalMaxPool2d** and **GlobalAvgPool2d**. They do not have testing and parameters are up to you but they must aggregate information within channels. Write test functions for these layers on your own."""

class GlobalMaxPool2d(Module):
    def __init__(self):
        super(GlobalMaxPool2d, self).__init__()
        self.indices = None

    def updateOutput(self, input):
        input_4d = input.reshape(input.shape[0], input.shape[1], -1) if len(input.shape) == 2 else input
        input_4d = input_4d.reshape(input_4d.shape[0], input_4d.shape[1], -1)  # (batch, channels, height*width)

        self.output = np.max(input_4d, axis=-1)  # (batch, channels)

        self.indices = np.argmax(input_4d, axis=-1)
        self.input_shape = input.shape

        return self.output

    def updateGradInput(self, input, gradOutput):
        self.gradInput = np.zeros_like(input)

        input_3d = input.reshape(input.shape[0], input.shape[1], -1)

        for b in range(gradOutput.shape[0]):
            for c in range(gradOutput.shape[1]):
                flat_idx = self.indices[b, c]

                if len(input.shape) == 4:
                    h = flat_idx // input.shape[3]
                    w = flat_idx % input.shape[3]
                    self.gradInput[b, c, h, w] = gradOutput[b, c]
                else:
                    self.gradInput[b, c, flat_idx] = gradOutput[b, c]

        return self.gradInput

    def __repr__(self):
        return "GlobalMaxPool2d"



class GlobalAvgPool2d:
    def __init__(self):
        self.output = None
        self.gradInput = None

    def updateOutput(self, input):
        self.output = np.mean(input, axis=(2, 3), keepdims=True)
        return self.output.squeeze()

    def updateGradInput(self, input, gradOutput):
        self.gradInput = np.ones_like(input) * (gradOutput[:, :, None, None] / (input.shape[2] * input.shape[3]))
        return self.gradInput

    def train(self):
        pass

    def evaluate(self):
        pass

    def __repr__(self):
        return "GlobalAvgPool2d"

"""#9. (0.2) Implement [**Flatten**](https://pytorch.org/docs/stable/generated/torch.flatten.html)"""

class Flatten(Module):
    def __init__(self, start_dim=0, end_dim=-1):
        super(Flatten, self).__init__()
        self.start_dim = start_dim
        self.end_dim = end_dim

    def updateOutput(self, input):
        input_tensor = torch.as_tensor(input)

        if self.end_dim == -1:
            self.end_dim = input_tensor.dim() - 1

        output_shape = input_tensor.shape[:self.start_dim] + (-1,) + input_tensor.shape[self.end_dim+1:]
        self.output = input_tensor.view(output_shape).numpy()

        return self.output

    def updateGradInput(self, input, gradOutput):
        input_tensor = torch.as_tensor(input)
        gradOutput_tensor = torch.as_tensor(gradOutput)

        input_shape = input_tensor.shape
        gradInput = gradOutput_tensor.view(input_shape).numpy()

        self.gradInput = gradInput
        return self.gradInput

    def __repr__(self):
        return "Flatten"

"""# Activation functions

Here's the complete example for the **Rectified Linear Unit** non-linearity (aka **ReLU**):
"""

class ReLU(Module):
    def __init__(self):
         super(ReLU, self).__init__()

    def updateOutput(self, input):
        self.output = np.maximum(input, 0)
        return self.output

    def updateGradInput(self, input, gradOutput):
        self.gradInput = np.multiply(gradOutput , input > 0)
        return self.gradInput

    def __repr__(self):
        return "ReLU"

"""## 10. (0.1) Leaky ReLU
Implement [**Leaky Rectified Linear Unit**](http://en.wikipedia.org/wiki%2FRectifier_%28neural_networks%29%23Leaky_ReLUs). Expriment with slope.
"""

class LeakyReLU(Module):
    def __init__(self, slope=0.03):
        super(LeakyReLU, self).__init__()
        self.slope = slope

    def updateOutput(self, input):
        # Your code goes here. ################################################
        self.output = np.where(input > 0, input, self.slope * input)
        return self.output

    def updateGradInput(self, input, gradOutput):
        # Your code goes here. ################################################
        self.gradInput = gradOutput * np.where(input > 0, 1, self.slope)
        return self.gradInput

    def __repr__(self):
        return f"LeakyReLU(slope={self.slope})"

"""## 11. (0.1) ELU
Implement [**Exponential Linear Units**](http://arxiv.org/abs/1511.07289) activations.
"""

class ELU(Module):
    def __init__(self, alpha=1.0):
        super(ELU, self).__init__()
        self.alpha = alpha

    def updateOutput(self, input):
        # Your code goes here. ################################################
        self.output = np.where(input > 0, input, self.alpha * (np.exp(input) - 1))
        return self.output

    def updateGradInput(self, input, gradOutput):
        # Your code goes here. ################################################
        self.gradInput = gradOutput * np.where(input > 0, 1, self.alpha * np.exp(input))
        return self.gradInput

    def __repr__(self):
        return "ELU"

"""## 12. (0.1) SoftPlus
Implement [**SoftPlus**](https://en.wikipedia.org/wiki%2FRectifier_%28neural_networks%29) activations. Look, how they look a lot like ReLU.
"""

class SoftPlus(Module):
    def __init__(self):
        super(SoftPlus, self).__init__()

    def updateOutput(self, input):
        # Your code goes here. ################################################
        self.output = np.log(1 + np.exp(input))
        return self.output

    def updateGradInput(self, input, gradOutput):
        # Your code goes here. ################################################
        self.gradInput = gradOutput * (1 / (1 + np.exp(-input)))
        return self.gradInput

    def __repr__(self):
        return "SoftPlus"

"""#13. (0.2) Gelu
Implement [**Gelu**](https://pytorch.org/docs/stable/generated/torch.nn.GELU.html) activations.
"""

class Gelu(Module):
    def __init__(self):
        super(Gelu, self).__init__()

    def updateOutput(self, input):
        input = torch.as_tensor(input)
        self.output = F.gelu(input)
        return self.output.detach().numpy()

    def updateGradInput(self, input, gradOutput):
        input = torch.as_tensor(input)
        gradOutput = torch.as_tensor(gradOutput)

        sqrt_2_over_pi = 0.7978845608
        cdf = 0.5 * (1.0 + torch.erf(input / math.sqrt(2.0)))
        pdf = torch.exp(-0.5 * input**2) / math.sqrt(2.0 * math.pi)
        gelu_derivative = cdf + input * pdf

        self.gradInput = (gradOutput * gelu_derivative).detach().numpy()
        return self.gradInput

    def __repr__(self):
        return "Gelu"

"""# Criterions

Criterions are used to score the models answers.
"""

class Criterion(object):
    def __init__ (self):
        self.output = None
        self.gradInput = None

    def forward(self, input, target):
        """
            Given an input and a target, compute the loss function
            associated to the criterion and return the result.

            For consistency this function should not be overrided,
            all the code goes in `updateOutput`.
        """
        return self.updateOutput(input, target)

    def backward(self, input, target):
        """
            Given an input and a target, compute the gradients of the loss function
            associated to the criterion and return the result.

            For consistency this function should not be overrided,
            all the code goes in `updateGradInput`.
        """
        return self.updateGradInput(input, target)

    def updateOutput(self, input, target):
        """
        Function to override.
        """
        return self.output

    def updateGradInput(self, input, target):
        """
        Function to override.
        """
        return self.gradInput

    def __repr__(self):
        """
        Pretty printing. Should be overrided in every module if you want
        to have readable description.
        """
        return "Criterion"

"""The **MSECriterion**, which is basic L2 norm usually used for regression, is implemented here for you.
- input:   **`batch_size x n_feats`**
- target: **`batch_size x n_feats`**
- output: **scalar**
"""

class MSECriterion(Criterion):
    def __init__(self):
        super(MSECriterion, self).__init__()

    def updateOutput(self, input, target):
        self.output = np.sum(np.power(input - target,2)) / input.shape[0]
        return self.output

    def updateGradInput(self, input, target):
        self.gradInput  = (input - target) * 2 / input.shape[0]
        return self.gradInput

    def __repr__(self):
        return "MSECriterion"

"""## 14. (0.2) Negative LogLikelihood criterion (numerically unstable)
You task is to implement the **ClassNLLCriterion**. It should implement [multiclass log loss](http://scikit-learn.org/stable/modules/model_evaluation.html#log-loss). Nevertheless there is a sum over `y` (target) in that formula,
remember that targets are one-hot encoded. This fact simplifies the computations a lot. Note, that criterions are the only places, where you divide by batch size. Also there is a small hack with adding small number to probabilities to avoid computing log(0).
- input:   **`batch_size x n_feats`** - probabilities
- target: **`batch_size x n_feats`** - one-hot representation of ground truth
- output: **scalar**


"""

class ClassNLLCriterionUnstable(Criterion):
    EPS = 1e-15

    def __init__(self):
        super(ClassNLLCriterionUnstable, self).__init__()

    def updateOutput(self, input, target):
        # Use this trick to avoid numerical errors
        input_clamp = np.clip(input, self.EPS, 1 - self.EPS)

        # Your code goes here. ################################################
        log_probs = np.sum(target * np.log(input_clamp), axis=1)
        self.output = -np.mean(log_probs)
        return self.output

    def updateGradInput(self, input, target):
        # Use this trick to avoid numerical errors
        input_clamp = np.clip(input, self.EPS, 1 - self.EPS)

        # Your code goes here. ################################################
        gradInput = -target / input_clamp
        self.gradInput = gradInput / input.shape[0]
        return self.gradInput

    def __repr__(self):
        return "ClassNLLCriterionUnstable"

"""## 15. (0.3) Negative LogLikelihood criterion (numerically stable)
- input:   **`batch_size x n_feats`** - log probabilities
- target: **`batch_size x n_feats`** - one-hot representation of ground truth
- output: **scalar**

Task is similar to the previous one, but now the criterion input is the output of log-softmax layer. This decomposition allows us to avoid problems with computation of forward and backward of log().
"""

class ClassNLLCriterion(Criterion):
    def __init__(self):
        super(ClassNLLCriterion, self).__init__()

    def updateOutput(self, input, target):
        log_probs = np.sum(target * input, axis=1)
        self.output = -np.mean(log_probs)
        return self.output

    def updateGradInput(self, input, target):
        self.gradInput = -target / input.shape[0]
        return self.gradInput

    def __repr__(self):
        return "ClassNLLCriterion"



"""1-—è —á–∞—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è: —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–µ–≤, –ª–æ—Å–µ–π –∏ —Ñ—É–Ω–∫—Ü–∏–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ - 5 –±–∞–ª–ª–æ–≤. \\
2-—è —á–∞—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è: —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –Ω–∞ —Å–≤–æ–∏—Ö –∫–ª–∞—Å—Å–∞—Ö. –ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:
  1. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∏ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –µ–≥–æ, —á—Ç–æ–± –æ–Ω —Ä–∞–±–æ—Ç–∞–ª —Å –≤–∞–º–∏ –∫–ª–∞—Å—Å–∞–º–∏. - 1 –±–∞–ª–ª.
  2. –ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–¥–∞—á–∏ –º—É–ª—å—Ç–∏—Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω—ã—Ö –≤–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FCNN, dropout, batchnorm, MSE. –ü—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—É–∫–Ω—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –î–ª—è –ø–µ—Ä–≤–æ–π –º–æ–¥–µ–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª—å—à—É—é, —Å—Ä–µ–¥–Ω—é—é –∏ –º–∞–ª–µ–Ω—å–∫—É—é –º–æ–¥–µ–ª—å. - 1 –±–∞–ª–ª.
  3. –ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–¥–∞—á–∏ –º—É–ª—å—Ç–∏–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ MNIST. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤—ë—Ä—Ç–∫–∏, –º–∞–∫—Å–ø—É–ª—ã, —Ñ–ª—ç—Ç—Ç—ç–Ω—ã, —Å–æ—Ñ—Ç–º–∞–∫—Å—ã - 1 –±–∞–ª–ª–∞.
  4. –ê–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Å–≤—ë—Ä—Ç–∫–∞—Ö –∏ –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã—Ö —Å–ª–æ—è—Ö, –¥—Ä–æ–ø–∞—É—Ç–∞—Ö, –±–∞—Ç—á–Ω–æ—Ä–º–∞—Ö –∏ —Ç–¥. - 2 –±–∞–ª–ª–∞. \\

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤ –æ—Ü–µ–Ω–∫–µ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è:
1. –ù–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏ –∏ –ª–æ—Å—Å —Ñ—É–Ω–∫—Ü–∏–∏.
2. –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ª–æ—Å–µ–π –∏ –º–µ—Ç—Ä–∏–∫ –Ω–∞ —Ç—Ä–µ–π–Ω–µ-–≤–∞–ª–∏–¥–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–µ.
3. –ù–∞–ª–∏—á–∏–µ —à–µ–¥—É–ª–µ—Ä–∞ –¥–ª—è lr.
4. –ù–∞–ª–∏—á–∏–µ –≤–æ—Ä–º–∞–ø–∞.
5. –ù–∞–ª–∏—á–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Ä–∞–Ω–Ω–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏.
6. –°–≤–∏—Ç—á –ª–æ—Å—è (–º–µ—Ç—Ä–∏–∫–∏) –∏ –æ–ø—Ç–∏–º–∞–π–∑–µ—Ä–∞.
"""

